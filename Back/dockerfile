# Build stage
FROM golang:1.23-alpine AS builder

# Install required dependencies
RUN apk add --no-cache git protoc

# Set working directory
WORKDIR /app

# Copy kubeconfig
COPY KUBECONFIG.yaml ./

# Copy go.mod and go.sum files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Install protoc plugins
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
RUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Copy proto file
COPY proto/ ./proto/

# Generate protobuf code
RUN protoc --go_out=. --go_opt=paths=source_relative \
           --go-grpc_out=. --go-grpc_opt=paths=source_relative \
           proto/*.proto

# Copy source code
COPY *.go ./

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o k3s-backend .

# Runtime stage
FROM alpine:3.19

# Install CA certificates for HTTPS connections
RUN apk --no-cache add ca-certificates

WORKDIR /app/

# Copy the binary from the builder stage
COPY --from=builder /app/k3s-backend .

# Copy the kubeconfig from the builder stage to the runtime image
COPY --from=builder /app/KUBECONFIG.yaml ./

# Create directories for certificates and configuration
RUN mkdir -p /etc/auth-service/tls
RUN mkdir -p /etc/auth-service/config

# Copy kubeconfig to the expected path
# In your Dockerfile
COPY KUBECONFIG.yaml /etc/auth-service/config/config

# Expose both gRPC and HTTPS ports
EXPOSE 50051 8443

# Set CMD with default arguments
ENTRYPOINT ["./k3s-backend"]